"" 表示
" 文字コード
set encoding=utf-8
" インデント
set autoindent
set smartindent
" 行番号の表示
set nonumber
" 編集中の行をハイライト
set cursorline
" 対応する括弧をハイライト
set showmatch
set matchtime=1
" インクリメンタルサーチを有効にする
set incsearch
" 編集中のファイルでも保存せず他のファイルを表示する
set hidden
" タブを空白文字に置き換える
set expandtab
" タブサイズ
set tabstop=2
set shiftwidth=2
" others
set backspace=indent,eol,start

"" ステータス行
" ステータス行を常に表示
set laststatus=2
" ファイル名表示
set statusline=%F
" 変更チェック表示
set statusline+=%m
" これ以降は右寄せ表示
set statusline+=%=
" ステータスラインにbranchを表示
set statusline+=%{fugitive#statusline()}
" 空白2つ挿入
set statusline+=\ \
" カーソル行の表示
set statusline+=%1l/%L

"" バックアップ
" backupファイルを作成しない
set nobackup
" swapファイルを作成しない
set noswapfile

"" Plugin
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'cocopon/iceberg.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'hashivim/vim-terraform'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'
Plug 'andymass/vim-matchup'
Plug 'tpope/vim-endwise'
call plug#end()

colorscheme iceberg

"" lsp
" tab completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

" lsp python
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

" lsp ruby
if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

" lsp go
if executable('gopls')
    " go get golang.org/x/tools/cmd/gopls
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif


filetype plugin indent on
syntax enable

" move window
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sL <C-w>L
nnoremap sH <C-w>H

" move cursor
nnoremap H ^
nnoremap L $

" ノーマルモード時だけ ; と : を入れ替える
nnoremap ; :
nnoremap : ;

" ctrlp
if executable('ag')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
nnoremap ,, :<c-u>CtrlPMRUFiles<cr>

" open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" filetype毎のインデントの設定
if has("autocmd")
  filetype plugin on
  filetype indent on
  autocmd FileType ruby setlocal sw=2 sts=2 ts=2 et
end

" NOTE: どこかで上書きされるので最後に記述
set shortmess-=S

" 行末の空白や最終行の空行を削除
autocmd BufWritePre * call s:remove_unnecessary_space()
function! s:remove_unnecessary_space()
    " delete last spaces
    %s/\s\+$//ge

    " delete last blank lines
    while getline('$') == ""
            $delete _
    endwhile
endfunction

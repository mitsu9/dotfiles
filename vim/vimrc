"" 表示
" 文字コード
set encoding=utf-8
" インデント
set autoindent
set smartindent
" 行番号の表示
set nonumber
" 編集中の行をハイライト
set cursorline
" 対応する括弧をハイライト
set showmatch
set matchtime=1
" インクリメンタルサーチを有効にする
set incsearch
" 編集中のファイルでも保存せず他のファイルを表示する
set hidden
" タブを空白文字に置き換える
set expandtab
" タブサイズ
set tabstop=2
set shiftwidth=2
" others
set backspace=indent,eol,start

"" ステータス行
" ステータス行を常に表示
set laststatus=2
" ファイル名表示
set statusline=%F
" 変更チェック表示
set statusline+=%m
" これ以降は右寄せ表示
set statusline+=%=
" ステータスラインにbranchを表示
set statusline+=%{fugitive#statusline()}
" 空白2つ挿入
set statusline+=\ \
" カーソル行の表示
set statusline+=%1l/%L

"" バックアップ
" backupファイルを作成しない
set nobackup
" swapファイルを作成しない
set noswapfile

set completeopt=menuone,noinsert,noselect

if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

"" Plugin
let g:plug_shallow = 0
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'cocopon/iceberg.vim'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

"" lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-lsp-icons'

Plug 'hashivim/vim-terraform'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'
Plug 'andymass/vim-matchup'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'
Plug 'solarnz/thrift.vim'
call plug#end()

colorscheme iceberg
set bg=dark

"" lsp settings
" ref. https://mattn.kaoriya.net/software/vim/20191231213507.htm
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> <f2> <plug>(lsp-rename)
  inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 0
""

filetype plugin indent on
syntax enable

" move window
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sL <C-w>L
nnoremap sH <C-w>H

" move cursor
nnoremap H ^
nnoremap L $

" ノーマルモード時だけ ; と : を入れ替える
noremap ; :
noremap : ;

" fzf
noremap ff :GFiles<CR>
noremap fb :Buffers<CR>
let g:fzf_layout = { 'down': '~40%' }

" open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" mhinz/vim-mix-format
let g:mix_format_on_save = 1

" filetype毎のインデントの設定
if has("autocmd")
  filetype plugin on
  filetype indent on
  autocmd FileType ruby setlocal sw=2 sts=2 ts=2 et
  autocmd FileType go setlocal sw=4 ts=4 et
end

" NOTE: どこかで上書きされるので最後に記述
set shortmess-=S

" 行末の空白や最終行の空行を削除
autocmd BufWritePre * call s:remove_unnecessary_space()
function! s:remove_unnecessary_space()
    " delete last spaces
    %s/\s\+$//ge

    " delete last blank lines
    while getline('$') == ""
            $delete _
    endwhile
endfunction

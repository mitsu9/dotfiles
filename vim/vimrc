unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

"" General
set encoding=utf-8
set autoindent
set smartindent
set nonumber
set cursorline
set showmatch
set matchtime=1
set incsearch
set hidden
set expandtab
set tabstop=2
set shiftwidth=2
set backspace=indent,eol,start
set completeopt=menuone,noinsert,noselect
set clipboard+=unnamed

"" Status
set laststatus=2
set statusline=%F
set statusline+=%m
set statusline+=%=
set statusline+=%{fugitive#statusline()}
set statusline+=\ \
set statusline+=%1l/%L

"" Backup
set nobackup
set noswapfile

"" Color
if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

"" Plugin
let g:plug_shallow = 0
call plug#begin('~/.vim/plugged')
" file
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/conflict-marker.vim'

" color
Plug 'cocopon/iceberg.vim'

" status line
Plug 'itchyny/lightline.vim'

" lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-lsp-icons'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

" language
Plug 'hashivim/vim-terraform'
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'
Plug 'solarnz/thrift.vim'
Plug 'chrisbra/csv.vim'
Plug 'mattn/vim-goimports'

" extension
Plug 'andymass/vim-matchup'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'cohama/lexima.vim'

" view/style
Plug 'machakann/vim-highlightedyank'
Plug 'markonm/traces.vim'
call plug#end()

"" Colorscheme
colorscheme iceberg
set bg=dark

"" lsp settings
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
endfunction

augroup lsp_insgall
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_text_edit_enabled = 0
""

filetype plugin indent on
syntax enable

"" Mapping
" move window
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sL <C-w>L
nnoremap sH <C-w>H

" move cursor
nnoremap H ^
nnoremap L $

" ノーマルモード時だけ ; と : を入れ替える
noremap ; :
noremap : ;

" fzf
noremap <C-p> :GFiles<CR>
noremap <C-b> :Buffers<CR>
let g:fzf_layout = { 'down': '~40%' }

" mhinz/vim-mix-format
let g:mix_format_on_save = 1

" machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration = 300

" filetype毎のインデントの設定
if has("autocmd")
  filetype plugin on
  filetype indent on
  autocmd FileType ruby setlocal sw=2 sts=2 ts=2 et
  autocmd FileType go setlocal sw=4 ts=4 et
end

" 行末の空白や最終行の空行を削除
autocmd BufWritePre * call s:remove_unnecessary_space()
function! s:remove_unnecessary_space()
    " delete last spaces
    %s/\s\+$//ge

    " delete last blank lines
    while getline('$') == ""
            $delete _
    endwhile
endfunction
